Lesson 2

- What happens when you initialize a repository? Why do you need to do it?

Git creates a metadata folder '.git'.
It is required so that Git can store all of its data.

- How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area can be thought as a transition area between what is in the working directory and what is tracked in the repo.
The staging area contains files that will be commit into the repo, while the working directory contains everything in the folder.
The staging area offers a way to separate what files will be commit and which won't.

- How can you use the staging area to make sure you have one commit per logical change?

The staging area can be used to separate out files with changes into those that will be commit or not.

- What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are useful when working on a feature that is not ready to be fully integrated yet, or when making modifications to make project variants.

- How do the diagrams help you visualize the branch structure?

Branch diagrams make it clear at what point in the commit history branches diverged, and therefore what work is present in each branch.

- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches involves creating a new commit containing the changes from both branches.
Because this new commit will have two parent commits, we represent this by drawing two arrows from it to the heads of the branches being merged.

- What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's automatic merging is useful most of the time when changes take place on different parts of the code, and can be assumed to be unambiguous. This saves a lot of time that would have been spent reviewing each change, and most of the time should not break code.

